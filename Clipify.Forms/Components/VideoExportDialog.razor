@using System.Text.RegularExpressions
@using FFmpeg.NET
@using FFmpeg.NET.Events

@inject VideoService VideoService


<Modal Title="导出视频" Visible="_visible">
    @switch (Status) {
        case FFmpegStatus.Running:
            <div class="flex items-center gap-4">
                <MudProgressCircular Color="MudBlazor.Color.Secondary" Indeterminate="true"/>
                <div>正在导出视频</div>
            </div>
            <MudProgressLinear Color="MudBlazor.Color.Primary" Striped="true" Size="Size.Large" Value="0" Class="my-7"/>
            break;
        case FFmpegStatus.Finish:
            <div class="flex items-center gap-4">
                <i class="fa-solid fa-circle-check text-green-600 text-4xl"></i>
                <div>搞定！</div>
            </div>
            <div class="mt-6">已保存到 @OutputDir</div>
            break;
        case FFmpegStatus.Error:
            <div class="flex items-center gap-4">
                错误
            </div>
            break;
        case FFmpegStatus.None:
        default:
            <div class="flex items-center gap-4">
                空状态
            </div>
            break;
    }
</Modal>


@code {
    bool _visible = false;

    public enum FFmpegStatus {
        None,
        Running,
        Finish,
        Error
    }

    public double Progress { get; set; }
    public MetaData MetaData { get; set; }
    public string OutputDir { get; set; }
    public FFmpegStatus Status { get; set; } = FFmpegStatus.None;

    private void OnProgress(object? sender, ConversionProgressEventArgs e) {
        // 计算进度百分比
        Progress = (e.ProcessedDuration.TotalSeconds / MetaData.Duration.TotalSeconds) * 100;
    }

    private void OnData(object? sender, ConversionDataEventArgs e) {
        Console.WriteLine("[onData] {0}", e.Data);
    }

    private void OnComplete(object? sender, ConversionCompleteEventArgs e) {
        Console.WriteLine("Completed conversion");
        Status = FFmpegStatus.Finish;
    }

    private void OnError(object? sender, ConversionErrorEventArgs e) {
        Console.WriteLine("Error: {0}\n{1}", e.Exception.ExitCode, e.Exception.InnerException);
        Status = FFmpegStatus.Error;
    }

    public async Task ExportVideo(MetaData metaData, string outputDir, string arguments, CancellationToken? cancellationToken = null) {
        _visible = true;

        MetaData = metaData;
        OutputDir = outputDir;

        VideoService.FFmpeg.Progress += OnProgress;
        VideoService.FFmpeg.Data += OnData;
        VideoService.FFmpeg.Complete += OnComplete;
        VideoService.FFmpeg.Error += OnError;

        Console.WriteLine($"执行命令：{arguments}");
        Status = FFmpegStatus.Finish;
        await InvokeAsync(StateHasChanged);

        // await VideoService.FFmpeg.ExecuteAsync(arguments, cancellationToken ?? CancellationToken.None);
    }

}