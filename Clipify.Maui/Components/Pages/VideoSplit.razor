@page "/videosplit"
@using Clipify.Core.Interfaces
@using Clipify.Core.Models
@inject IDialogService DialogService
@inject IMessageService MsgService
@inject IVideoService VideoService

<h3>视频分割</h3>

<div class="container">
    <div class="row mb-3">
        <div class="col-md-12">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="选择视频文件" @bind="VideoPath" readonly />
                <button class="btn btn-primary" @onclick="OpenFileDialog">选择文件</button>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="选择输出目录" @bind="OutputDir" readonly />
                <button class="btn btn-primary" @onclick="OpenDirDialog">选择目录</button>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="EnableStartTime" id="enableStartTime" />
                <label class="form-check-label" for="enableStartTime">
                    设置开始时间
                </label>
            </div>
            @if (EnableStartTime)
            {
                <div class="input-group mt-2">
                    <input type="number" class="form-control" placeholder="时" @bind="StartHour" min="0" />
                    <input type="number" class="form-control" placeholder="分" @bind="StartMinute" min="0" max="59" />
                    <input type="number" class="form-control" placeholder="秒" @bind="StartSecond" min="0" max="59" />
                </div>
            }
        </div>
        <div class="col-md-6">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="EnableEndTime" id="enableEndTime" />
                <label class="form-check-label" for="enableEndTime">
                    设置结束时间
                </label>
            </div>
            @if (EnableEndTime)
            {
                <div class="input-group mt-2">
                    <input type="number" class="form-control" placeholder="时" @bind="EndHour" min="0" />
                    <input type="number" class="form-control" placeholder="分" @bind="EndMinute" min="0" max="59" />
                    <input type="number" class="form-control" placeholder="秒" @bind="EndSecond" min="0" max="59" />
                </div>
            }
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="UseSameQuality" id="useSameQuality" />
                <label class="form-check-label" for="useSameQuality">
                    保持原视频质量
                </label>
            </div>
        </div>
        <div class="col-md-6">
            <select class="form-select" @bind="OutputFormat">
                <option value="mp4">MP4</option>
                <option value="mkv">MKV</option>
                <option value="avi">AVI</option>
                <option value="mov">MOV</option>
            </select>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <button class="btn btn-success" @onclick="ExportVideo" disabled="@(!CanExport)">开始处理</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(FFmpegCommand))
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        FFmpeg命令
                    </div>
                    <div class="card-body">
                        <pre>@FFmpegCommand</pre>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private CancellationTokenSource _cts = new CancellationTokenSource();
    
    public string? VideoPath { get; set; }
    public string? OutputDir { get; set; }
    public string? VideoMetadata { get; set; }

    public bool EnableStartTime { get; set; }
    public bool EnableEndTime { get; set; }
    
    public int StartHour { get; set; }
    public int StartMinute { get; set; }
    public int StartSecond { get; set; }
    
    public int EndHour { get; set; }
    public int EndMinute { get; set; }
    public int EndSecond { get; set; }
    
    public bool UseSameQuality { get; set; } = true;
    public string OutputFormat { get; set; } = "mp4";

    public bool CanExport => !string.IsNullOrEmpty(VideoPath) && !string.IsNullOrEmpty(OutputDir);

    public string? OutputPath => string.IsNullOrWhiteSpace(OutputDir) || string.IsNullOrWhiteSpace(VideoPath) 
        ? null 
        : Path.Combine(OutputDir, $"{Path.GetFileNameWithoutExtension(VideoPath)}_cut.{OutputFormat}");

    public string? FFmpegCommand => $"ffmpeg -y -hide_banner -i \"{VideoPath}\" {(UseSameQuality ? "-c copy" : "")} \"{OutputPath}\"";

    protected override Task OnInitializedAsync()
    {
        DialogService.OnFileSelected += UpdateSelectedFile;
        DialogService.OnDirSelected += UpdateSelectedDir;
        return base.OnInitializedAsync();
    }

    private async Task OpenFileDialog()
    {
        await DialogService.OpenFileAsync();
    }

    private async Task OpenDirDialog()
    {
        await DialogService.OpenDirAsync();
    }

    private async Task UpdateSelectedFile(string path)
    {
        VideoPath = path;
        try
        {
            // 简化实现，获取文件元数据
            VideoMetadata = VideoService.GetFileMetadataMd5(path);
            
            // 生成缩略图
            await VideoService.GenerateThumbnailAsync(path, _cts.Token);
        }
        catch (Exception ex)
        {
            await MsgService.Error($"无法读取视频元数据: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private Task UpdateSelectedDir(string path)
    {
        OutputDir = path;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ExportVideo()
    {
        if (string.IsNullOrEmpty(VideoPath))
        {
            await MsgService.Error("请选择视频文件");
            return;
        }

        if (string.IsNullOrEmpty(OutputDir))
        {
            await MsgService.Error("请选择输出目录");
            return;
        }

        var options = new VideoProcessingOptions
        {
            VideoPath = VideoPath,
            OutputDir = OutputDir,
            EnableStartTime = EnableStartTime,
            EnableEndTime = EnableEndTime,
            StartHour = StartHour,
            StartMinute = StartMinute,
            StartSecond = StartSecond,
            EndHour = EndHour,
            EndMinute = EndMinute,
            EndSecond = EndSecond,
            UseSameQuality = UseSameQuality,
            OutputFormat = OutputFormat
        };

        try
        {
            await MsgService.Info("开始处理视频...");
            
            // 在实际应用中，这里应该调用Core项目中的视频处理器
            // 这里我们只是模拟一个处理过程
            await Task.Delay(2000);
            
            await MsgService.Success("视频处理完成");
        }
        catch (Exception ex)
        {
            await MsgService.Error($"处理视频时出错: {ex.Message}");
        }
    }
} 